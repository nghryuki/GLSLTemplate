"use strict";

var GlslParam = function GlslParam() {
    this.timeSpeed = 1000;
    this.isDebug = true;
};
var _glslParam = void 0;
var _glslParamGUI = void 0;

var _threeScene = void 0;
var _threeCamera = void 0;
var _threeRenderer = void 0;

var _cvs = void 0;
var _cvsWrap = void 0;

var _isShaderLoaded = false;
var _uniforms = {
    u_resolution: {
        type: "vec2",
        value: new THREE.Vector2()
    },
    u_mouse: {
        type: "vec2",
        value: new THREE.Vector2()
    },
    u_time: {
        type: "f",
        value: new Number()
    }
};
var _mousePos = { x: 0, y: 0 };
var _startTime = 0;

/* 
    threejs geometry
*/
var _screen = void 0;

/* 
    DOM loaded
*/
document.addEventListener("DOMContentLoaded", awake);
function awake() {
    //
    _startTime = Date.now();
}

/* 
    contents loaded
*/
window.addEventListener("load", start);
function start() {
    //
    _cvs = document.getElementById("cvs");
    _cvsWrap = document.getElementById("cvsWrap");
    cvsSizing();

    //
    datInit();

    //
    threeInit();

    //
    window.addEventListener("resize", resize);
    window.addEventListener('mousemove', mouseMove);

    //
    update();
}

/* 
    update
*/
function update() {
    //
    reloadUniforms();

    //
    window.requestAnimationFrame(update);
}

/* 
    canvas sizing
*/
function cvsSizing() {
    console.log('cvs sizing');

    _cvs.style.width = _cvsWrap.getBoundingClientRect().width.toString() + "px";
    _cvs.style.height = _cvsWrap.getBoundingClientRect().height.toString() + "px";
}

/* 
    dat.gui init
*/
function datInit() {
    _glslParam = new GlslParam();
    _glslParamGUI = new dat.GUI();
    _glslParamGUI.add(_glslParam, 'timeSpeed', 10, 2000);
    _glslParamGUI.add(_glslParam, 'isDebug').onChange(function () {});
}

/* 
    threejs init
*/
function threeInit() {
    console.log('three init');

    // scene
    _threeScene = new THREE.Scene();

    // camera
    _threeCamera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 10000);
    _threeCamera.position.set(0, 0, 200);
    _threeCamera.lookAt(new THREE.Vector3(0, 0, 0));

    // renderer
    _threeRenderer = new THREE.WebGLRenderer({
        canvas: _cvs
    });
    _threeRenderer.setSize(window.innerWidth, window.innerHeight);

    // light
    var directionalLight = new THREE.DirectionalLight(0xFFFFFF);
    directionalLight.position.set(1, 1, 1);
    _threeScene.add(directionalLight);
    //
    var ambientLight = new THREE.AmbientLight(0xFFFFFF);
    ambientLight.position.set(0, 1, 0);
    _threeScene.add(ambientLight);

    //
    shaderLoad();

    // 初回実行
    _threeRenderer.render(_threeScene, _threeCamera);
}

/* 
    shader load
*/
function shaderLoad() {
    var url = location.href;

    // vert
    var vertContent = void 0;
    var vertObj = new XMLHttpRequest();
    vertObj.open('get', url + '/_shader/main.vert', true);
    vertObj.onreadystatechange = processResultVert;
    function processResultVert() {
        if (vertObj.readyState == 4) {
            if (vertObj.status == 200 || vertObj.status == 201) {
                // リクエストの処理
                vertContent = this.responseText;
                console.log('vert : ', vertContent);
                shaderLoaded();
            } else {
                // エラー処理
            }
        }
    };
    vertObj.send(null);

    // frag
    var fragContent = void 0;
    var fragObj = new XMLHttpRequest();
    fragObj.open('get', url + '/_shader/main.frag', true);
    fragObj.onreadystatechange = processResultFrag;
    function processResultFrag() {
        if (fragObj.readyState == 4) {
            if (fragObj.status == 200 || fragObj.status == 201) {
                // リクエストの処理
                fragContent = this.responseText;
                console.log('frag : ', fragContent);
                shaderLoaded();
            } else {
                // エラー処理
            }
        }
    };
    fragObj.send(null);

    function shaderLoaded() {
        if (vertContent == null || fragContent == null) return;

        console.log('shader load comp;');

        _isShaderLoaded = true;

        // make screen
        var geometry = new THREE.PlaneGeometry(1200, 1200, 32);
        var material = new THREE.ShaderMaterial({
            vertexShader: vertContent,
            fragmentShader: fragContent,
            // vertexShader: document.getElementById("vs").textContent,
            // fragmentShader: document.getElementById("fs").textContent,
            uniforms: _uniforms
        });

        _screen = new THREE.Mesh(geometry, material);
        _threeScene.add(_screen);

        threeResizing();

        _threeRenderer.render(_threeScene, _threeCamera);
    }
}

/* 
    reload uniforms
*/
function reloadUniforms() {
    if (!_isShaderLoaded) return;

    // console.log('reload uniforms');

    // mouse position
    _uniforms.u_mouse.value = new THREE.Vector2(_mousePos.x, _mousePos.y);

    // time
    var elapsedMilliseconds = Date.now() - _startTime;
    var elapsedSeconds = elapsedMilliseconds / _glslParam.timeSpeed;
    _uniforms.u_time.value = elapsedSeconds;

    _threeRenderer.render(_threeScene, _threeCamera);
}

/* 
    threejs resizing
*/
function threeResizing() {
    console.log('three resizing');

    var w = window.innerWidth;
    var h = window.innerHeight;

    // resolution
    _uniforms.u_resolution.value = new THREE.Vector2(w, h);

    _threeRenderer.setPixelRatio(window.devicePixelRatio);
    _threeRenderer.setSize(w, h);

    _threeCamera.aspect = w / h;
    _threeCamera.updateProjectionMatrix();

    _threeRenderer.render(_threeScene, _threeCamera);
}

// --- event --- //

/* 
    window resized
*/
function resize() {
    cvsSizing();

    threeResizing();
}

/* 
    mosue move
*/
function mouseMove(e) {
    e = event || window.event;
    _mousePos = { x: e.clientX, y: e.clientY };
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
